// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: goal.sql

package db

import (
	"context"
	"database/sql"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO goals (
  user_id, name, description, type, target_value
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_id, name, description, type, target_value, created_at, updated_at
`

type CreateGoalParams struct {
	UserID      int64          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Type        sql.NullString `json:"type"`
	TargetValue sql.NullString `json:"target_value"`
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goals, error) {
	row := q.db.QueryRowContext(ctx, createGoal,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.TargetValue,
	)
	var i Goals
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.TargetValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGoal = `-- name: DeleteGoal :exec
DELETE FROM goals
WHERE id = $1
`

func (q *Queries) DeleteGoal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGoal, id)
	return err
}

const getGoal = `-- name: GetGoal :one
SELECT id, user_id, name, description, type, target_value, created_at, updated_at FROM goals
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGoal(ctx context.Context, id int64) (Goals, error) {
	row := q.db.QueryRowContext(ctx, getGoal, id)
	var i Goals
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.TargetValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGoals = `-- name: ListGoals :many
SELECT id, user_id, name, description, type, target_value, created_at, updated_at FROM goals
WHERE user_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListGoalsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGoals(ctx context.Context, arg ListGoalsParams) ([]Goals, error) {
	rows, err := q.db.QueryContext(ctx, listGoals, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goals
	for rows.Next() {
		var i Goals
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Type,
			&i.TargetValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE goals
SET name = $2, description = $3, type = $4, target_value = $5, updated_at = now()
WHERE id = $1
RETURNING id, user_id, name, description, type, target_value, created_at, updated_at
`

type UpdateGoalParams struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Type        sql.NullString `json:"type"`
	TargetValue sql.NullString `json:"target_value"`
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Goals, error) {
	row := q.db.QueryRowContext(ctx, updateGoal,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.TargetValue,
	)
	var i Goals
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.TargetValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
