// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contact.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
  user_id, first_name, last_name, email, phone, company_name, address
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, first_name, last_name, email, phone, company_name, address, created_at, updated_at
`

type CreateContactParams struct {
	UserID      int64          `json:"user_id"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	Email       sql.NullString `json:"email"`
	Phone       sql.NullString `json:"phone"`
	CompanyName sql.NullString `json:"company_name"`
	Address     sql.NullString `json:"address"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contacts, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.CompanyName,
		arg.Address,
	)
	var i Contacts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CompanyName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, user_id, first_name, last_name, email, phone, company_name, address, created_at, updated_at FROM contacts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, id int64) (Contacts, error) {
	row := q.db.QueryRowContext(ctx, getContact, id)
	var i Contacts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CompanyName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, user_id, first_name, last_name, email, phone, company_name, address, created_at, updated_at FROM contacts
WHERE user_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListContactsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contacts, error) {
	rows, err := q.db.QueryContext(ctx, listContacts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contacts{}
	for rows.Next() {
		var i Contacts
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.CompanyName,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET first_name = $2, last_name = $3, email = $4, phone = $5, company_name = $6, address = $7, updated_at = now()
WHERE id = $1
RETURNING id, user_id, first_name, last_name, email, phone, company_name, address, created_at, updated_at
`

type UpdateContactParams struct {
	ID          int64          `json:"id"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	Email       sql.NullString `json:"email"`
	Phone       sql.NullString `json:"phone"`
	CompanyName sql.NullString `json:"company_name"`
	Address     sql.NullString `json:"address"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contacts, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.CompanyName,
		arg.Address,
	)
	var i Contacts
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CompanyName,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
